// Approach
// 1. Initialize Variables:
// start to mark the beginning of the sliding window.
// current_cost to keep track of the total transformation cost of the current window.
// max_length to store the maximum length of a valid window found.

// 2. Iterate through the String:
// Use end as the current end of the window.
// For each character at end, compute the cost to convert s[end] to t[end] and add it to current_cost.

// 3. Adjust the Window:
// If current_cost exceeds maxCost, increment start to shrink the window from the left, subtracting the cost of the character at start from current_cost, until the total cost is within the allowed limit.

// 4. Update the Maximum Length:
// After adjusting the window, compare its size (end - start + 1) with max_length and update max_length if the current window is larger.

// 5. Return the Result:
// The maximum valid window length found during the iteration is returned as the result.

// TC : O(n)
// SC : O(1)

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) 
    {
        int start=0, maxLength=0, currCost=0;
        int n=s.size();

        for(int end=0;end<n;end++)
        {
            currCost+=abs(s[end]-t[end]);
            while(currCost>maxCost)
            {
                currCost-=abs(s[start]-t[start]);
                start++;
            }
            maxLength=max(maxLength, (end-start+1));
        }

        return maxLength;
    }
};
