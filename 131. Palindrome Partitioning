// A simple observation is every time we are just checking wheather the string is palindrome or not. So we can just precompute this to optimize the TC from 2^(n-1)*(n+n) (first n is for checking palindrome and second one is for substr) to 2^(n-1)*(n)+(n^3) for precomputation. But it will increase the space from O(n) to O(n+n^2). Precomputation 2D vector will only tell wheather from index i...j is palindrome or not.
class Solution {
public:
    bool isPalindrome(string s, int start, int end)
    {
        while(start<=end)
        {
            if(s[start]!=s[end]) return false;
            start++;
            end--;
        }
        return true;
    }
    void helper(vector<vector<string>>& ans, vector<string>&path, int index, string s, vector<vector<bool>> &precompute)
    {
        if(index==s.size())
        {
            ans.push_back(path);
            return;
        }
        
        for(int i=index;i<s.size();i++)
        {
            if(precompute[index][i])
            {
                path.push_back(s.substr(index, i-index+1));
                helper(ans, path, i+1, s, precompute);
                path.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) 
    {
        vector<vector<string>> ans;
        vector<string> path;
        
        int n=s.size();
        vector<vector<bool>> precompute(n,vector<bool>(n,0));
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                if(isPalindrome(s,i,j))
                    precompute[i][j]=1;
            }
        }
        
        helper(ans, path, 0, s, precompute);
        return ans;
    }
};
