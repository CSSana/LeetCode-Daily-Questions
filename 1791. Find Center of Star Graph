class Solution {
public:
    int findCenter(vector<vector<int>>& edges) 
    {
        int n=-1;
        unordered_map<int,int>mp;
        for(auto it: edges)
        {
            mp[it[0]]++, mp[it[1]]++;
            n=max({n,it[0],it[1]});
        }
        
        for(auto it: mp)
        {
            if(it.second==n-1)
                return it.first;
        }
        
        return -1;
    }
};

// class Solution {
// public:
//     int findCenter(vector<vector<int>>& edges) {
//         int ans=0;
//         if(edges[0][0]==edges[1][0] or edges[0][0]==edges[1][1])
//             return edges[0][0];
//         else return edges[0][1];
//         return ans;
//     }
// };


//So if you can observe the example you will notice that the center point ans if present in every edges[i] which means in every entry there is a center. Now if we take any 2 nodes, here I have taken 1st 2 nodes that is 'edges[0] and edges[1]' then I will check in both of this which element is common and the common element is the answer.
