class Solution {
public:
    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) 
    {
        sort(worker.begin(),worker.end(),greater<int>());
        int maxi=*max_element(worker.begin(),worker.end());
        int n=difficulty.size();
        priority_queue<pair<int,int>>pq;
        
        for(int i=0;i<n;i++)
        {
            if(difficulty[i]<=maxi)
                pq.push({profit[i],difficulty[i]});
        }
        
        if(pq.size()==0)
            return 0;
        
        int ans=0;
        
        // for(auto it: worker)
        //     cout<<it<<" ";
        
        for(int i=0;i<worker.size();i++)
        {
            if(worker[i]>=pq.top().second)
                ans+=pq.top().first;
            else if(pq.size())
            {
                pq.pop();
                i--;
            }
        }
        
        return ans;
    }
};
